<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JacaScript on 刘蓓科的个人博客</title>
    <link>https://www.liubeike.com/categories/jacascript/</link>
    <description>Recent content in JacaScript on 刘蓓科的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 13 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.liubeike.com/categories/jacascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JS函数的执行时机</title>
      <link>https://www.liubeike.com/posts/js-05/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-05/</guid>
      <description>举个例子:
let i = 0; for (i = 0; i &amp;lt; 6; i++) { setTimeout(() =&amp;gt; { console.log(i); }, 0); } 运行上面代码，我们会发现 console 打印出来的是 6 个 6,那这是为什么呢？ 在上面代码中，我们使用 setTimeout()定义了一个定时器，该定时器在定时器到期后执行一个函数或指定的一段代码。 并将他的延时设为了 0，但是需要被强调是，setTimeout()实际延时会比设定值更久，导致了将原本要即时打印的结果延迟到 for 循环结束之后，所以这里结果是 for 循环结束才开始打印执行的，且只有 1 个 i，这时 i 的值已经是 5 了，再执行 i++，打印出了最终的 6 个 6。
那么，如果我们想写出让上面代码打印 0、1、2、3、4、5 的方法，该如何写呢？
 可以让 i 定义成 for 循环的局部变量，例如：  for (let i = 0; i &amp;lt; 6; i++) { setTimeout(() =&amp;gt; { console.log(i); }, 0); } </description>
    </item>
    
    <item>
      <title>JS数组基本用法</title>
      <link>https://www.liubeike.com/posts/js-04/</link>
      <pubDate>Tue, 13 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-04/</guid>
      <description>创建数组  新建  let arr = [1, 2, 3]; let arr = new Array(1, 2, 3); let arr = new Array(3);  转化  let arr = &amp;#34;1,2,3&amp;#34;.split(&amp;#34;,&amp;#34;); let arr = &amp;#34;123&amp;#34;.split(&amp;#34;&amp;#34;); Array.from(&amp;#34;123&amp;#34;);  伪数组  /* 伪数组的原型链中并没有数组的原型*/ let divList = document.querySelectorAll(&amp;#34;div&amp;#34;);  合并  arr1.concat(arr2);  截取 arr1.slice(1)//从第二个元素开始 arr1.slice(0)//全部截取，注意：js 只提供浅拷贝  数组中的元素  删除  arr.shift(); //删除arr头部的元素，并返回被删元素 arr.pop(); //删除arr尾部的元素，并返回被删元素 arr.splice(index, 1, &amp;#34;x&amp;#34;); //删除index的一个元素并添加&amp;#39;x&amp;#39;  查看  //第一种查询所有属性名和值 for (let i = 0; i &amp;lt; arr.</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>https://www.liubeike.com/posts/js-03/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-03/</guid>
      <description>声明对象的两种语法 写法  let obj = { &amp;lsquo;name&amp;rsquo;: &amp;lsquo;baker&amp;rsquo;, &amp;lsquo;age&amp;rsquo;: 18 } let obj = new Object({&amp;lsquo;name&amp;rsquo;: &amp;lsquo;baker&amp;rsquo;})  细节  键名是字符串，不是标识符，可以包含任意字符 引号可省略，省略之后就只能写标识符 就算引号省略了，键名也还是字符串（重要）  如何删除对象的属性 delete obj.xxx 或 delete obj[&amp;lsquo;xxx&amp;rsquo;]
即可删除 obj 的 xxx 属性，但请区分「属性值为 undefined」和「不含属性名」。
  不含属性名
&amp;lsquo;xxx&amp;rsquo; in obj === false
  含有属性名，但是值为 undefined
&amp;lsquo;xxx&amp;rsquo; in obj &amp;amp;&amp;amp; obj.xxx === undefined
  注意 obj.xxx === undefined
不能断定 &amp;lsquo;xxx&amp;rsquo; 是否为 obj 的属性
  如何查看对象的属性  查看自身所有属性</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://www.liubeike.com/posts/js-01/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-01/</guid>
      <description>什么是表达式和语句 语句（statement）是为了完成某种任务而进行的操作，比如下面就是一行赋值语句。
var a = 1 + 1; 这条语句先用 var 命令，声明了变量 a，然后将 1 + 1 的运算结果赋值给变量 a。
1 + 1 叫做表达式（expression），指一个为了得到返回值的计算式。
语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。
凡是 JavaScript 语言中预期为值的地方，都可以使用表达式。比如，赋值语句的等号右边，预期是一个值，因此可以放置各种表达式。
标识符的规则 标识符（identifier）指的是用来识别各种值的合法名称。最常见的标识符就是变量名，以及后面要提到的函数名。JavaScript 语言的标识符对大小写敏感，所以 a 和 A 是两个不同的标识符。
标识符命名规则如下:
 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字 0-9。 中文是合法的标识符，可以用作变量名。  if else if (a === 1) { //满足条件时，执行的语句 } else { //不满足条件时，执行的语句 } 上面代码判断变量 a 是否等于 1，如果等于就执行 if 代码块，否则执行 else 代码块。
while 、 for  while  var i = 0; while (i &amp;lt; 100) { console.</description>
    </item>
    
    <item>
      <title>JS的数据类型</title>
      <link>https://www.liubeike.com/posts/js-02/</link>
      <pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-02/</guid>
      <description>七种数据类型  number 数字 string 字符串 bool 布尔 symbol 符号 undefined 空 null 空 object 对象  类型转换  number 转 string
String(n)或 n+&#39;&#39; string 转 number
Number(s)或 s-0 x 转 bool
Boolean(x)或!!x x 转 string
String(x)或 x.toString()  五个 falsy 值  undefined null 0 NaN &#39;&#39;  </description>
    </item>
    
  </channel>
</rss>
