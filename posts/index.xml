<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 刘蓓科的个人博客</title>
    <link>https://www.liubeike.com/posts/</link>
    <description>Recent content in Posts on 刘蓓科的个人博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 11 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.liubeike.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript 的诞生</title>
      <link>https://www.liubeike.com/posts/js-born/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/js-born/</guid>
      <description>1994 年，在互联网刚兴起的时代，网景公司（Netscape）发布了 Navigator 浏览器 0.9 版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。因此网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。
1995 年，Sun 公司将 Oak 语言更名为 Java 并推向市场，并宣称“Write Once, Run Anywhere”。网景公司深受 Java 的影响，网景公司高层都非常信赖 Java，所以网景公司决定要蹭 Java 的流量，新开发一门语言，用于浏览器的交互。
1995 年 4 月，BrendanEich（布兰登·艾奇） 加入网景公司。Brenden 原本研究方向是函数式编程与 Scheme 语言。但是 1995 年 5 月，网景公司指定 Brenden 成为了“新语言”的设计师。并且要求这个“新语言”要和 Java 足够的相似（面向对象思想），但是要比 Java 能够更加简单地上手。
Brenden 志不在此，而且对 Java 完全不感兴趣，为了完成任务他花了 10 天时间便把这门“新语言”的最初版本设计了出来。
总的来说，他的设计思路是这样的  借鉴 C 语言的基本语法； 借鉴 Java 语言的数据类型和内存管理； 借鉴 Scheme 语言，将函数提升到&amp;quot;第一等公民&amp;quot;（first class）的地位； 借鉴 Self 语言，使用基于原型（prototype）的继承机制。   所以，Javascript 语言实际上是两种语言风格的混合产物&amp;mdash;-（简化的）函数式编程+（简化的）面向对象编程。这是由 Brendan Eich（函数式编程）与网景公司（面向对象编程）共同决定的。</description>
    </item>
    
    <item>
      <title>浅析 URL</title>
      <link>https://www.liubeike.com/posts/url/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/url/</guid>
      <description>URL 指的是统一资源定位符（Uniform Resource Locator）。URL 包含协议、域名或 IP、端口号、路径、查询参数、锚点。
URL 包含哪几部分，每部分分别有什么作用?  http 是协议，表明了浏览器必须使用何种协议，HTTP 或 HTTPS。 www.abc.com是域名。表明正在请求哪个 Web 服务器。或者，可以直接使用 IP address。 :80 是端口。表示用于访问 Web 服务器上的资源的技术“门”。HTTP 协议的标准端口，HTTP 为 80，HTTPS 为 443。 /path/to/myfile.html 是网络服务器上资源的路径。在 Web 的早期阶段，像这样的路径表示 Web 服务器上的物理文件位置。 ?key1=value1&amp;amp;key2=value2 是查询参数。 这些参数是用 &amp;amp; 符号分隔的键/值对列表。每个 Web 服务器都有自己关于参数的规则。 #SomewhereInTheDocument 是锚点。 锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。例如，在视频或音频文档上，浏览器将尝试转到锚代表的时间。  DNS 的作用是什么，nslookup 命令怎么用?  DNS （Domain Name System 的缩写）的作用非常简单，就是根据域名查出 IP 地址。你可以把它想象成一本巨大的电话本。 nslookup 后面跟域名参数可以解析域名  IP 的作用是什么，ping 命令怎么用？   IP 地址（英语：IP Address，全称 Internet Protocol Address），又译为网际协议地址、互联网协议地址。当设备连接网络，设备将被分配一个 IP 地址，用作标识。通过 IP 地址，设备间可以互相通讯，如果没有 IP 地址，我们将无法知道哪个设备是发送方，无法知道哪个是接收方。IP 地址有两个主要功能：标识设备或网络 和 寻址（英语：location addressing）。</description>
    </item>
    
    <item>
      <title>CSS知识总结1</title>
      <link>https://www.liubeike.com/posts/css-01/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/css-01/</guid>
      <description>层叠样式表(Cascading Style Sheets，缩写为 CSS），是一种样式表语言，用来描述 HTML 或 XML（包括如 SVG、MathML、XHTML 之类的 XML 分支语言）文档的呈现。
CSS 是谁发明的？ 在 1994 年 10 月 10 日，CSS 之父 Håkon Wium Lie 提出了 CSS 的最初建议，并且在芝加哥的一次会议上正式提出了 CSS 。
浏览器支持查询方式 caniuse.com 输入你关心的样式，查看大部分浏览器的支持情况
border 调试法 怀疑某个元素有问题，就给这个元素加 border。 border 没出现，说明选择器或语法错了。 border 出现了，看看边界是否符合预期。 bug 解决后再删掉 border
速写 n 个元素：span{第$个 span 元素}*8
文档流 流动方向  inline 元素从左到右，到达最右边才会换行 block 元素从上到下，每一个都另起一行 inline-block 从左到右，但不会把一个元素分隔在上下两行  宽度  inline 宽度为内部 inline 元素的和，不能用 width 指定 block 默认自动计算宽度，可用 width 指定 inline-block 结合前两者特点，可用 width  高度  inline 高度由 line-height 间接确定，跟 height 无关 block 高度由内部文档流元素决定，可以设 height inline-block 跟 block 类似，可以设置 height  溢出  overflow: hidden: 隐藏溢出内容 overflow: scroll: 显示滚动条，如果内容宽度和高度没有溢出，也会有滚动条 Overflow: auto: 灵活地显示滚动条，只有在需要的时候才会出现滚动条  脱离文档流  position: absolute float: left  盒模型 两种盒模型  content-box 内容盒 内容就是盒子的边界 border-box 边框盒 边框才是盒子的边界  公式  content-box width=内容宽度 border-box width=内容宽度+padding+border  margin 合并  父子 margin 会合并，兄弟 margin 会合并。  如何阻止合并  父子合并用 padding/border/overflow:hidden/display:flex 兄弟合并用 inline-block  基本长度单位  px 像素 em 相对于自身 font-size 的倍数 百分数 整数  颜色  #ff6600 或#f60 rgb(0,0,0)或 rgba(0,0,0,1) hsl(360,100%,100%)  </description>
    </item>
    
    <item>
      <title>CSS知识总结2</title>
      <link>https://www.liubeike.com/posts/css-02/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/css-02/</guid>
      <description>flex 布局重点属性  display:flex //让一个元素变成 flex 容器 flex-direction:row/column //改变 items 主轴流动方向 flex-wrap:wrap //改变折行 just-content:center/space-between //改变主轴对齐方向 align-items:center //改变次轴对齐方向  一个 div 的分层 position 重点属性  static 默认值，待在文档流里 relative 相对定位，升起来，但不脱离文档流，一般用来做爸爸 absolute 绝对定位，定位基准是祖先里的非 static 经验之谈：如果写了 absolute 一定要补 top 和 left  层叠上下文  要记住处在同一个层叠上下文中的 z-index 才能做比较  </description>
    </item>
    
    <item>
      <title>CSS知识总结3</title>
      <link>https://www.liubeike.com/posts/css-03/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/css-03/</guid>
      <description>浏览器渲染原理  根据 HTML 构建 HTML 树（DOM） 根据 CSS 构建 CSS 树（CSSOM） 将两颗树合并成一颗渲染树（render tree） Layout 布局（文档流、盒模型、计算大小和位置） Paint 绘制（把边框颜色、文字颜色、阴影等画出来） Compose 合成（根据层叠关系展示画面）  CSS 动画的两种做法 transition  translate 位移 scanle 缩放 rotate 旋转 skew 倾斜  经验之谈  一般都需要配合 transition 过渡 inline 元素不支持 transform，需要先变成 block translate(-50%,-50%)可做绝对定位元素的居中 display：none=&amp;gt;block 没法过渡，一般改成 visibility:hidden=&amp;gt;visible  animation  简写语法 animation: 动画名｜时长｜过渡方式｜延迟｜次数｜方向 animation-name 规定需要绑定到选择器的 keyframe 名称。 animation-duration 规定完成动画所花费的时间，以秒或毫秒计。 animation-timing-function 规定动画的速度曲线。 animation-delay 规定在动画开始之前的延迟。 animation-iteration-count 规定动画应该播放的次数。 animation-direction 规定是否应该轮流反向播放动画。  animation 与 transition 的区别  transition 关注的是 CSS property 的变化，property 值和时间的关系是一个三次贝塞尔曲线。 animation 作用于元素本身而不是样式属性，可以使用关键帧的概念，应该说可以实现更自由的动画效果。 至于实现动画效果用哪一种，我的感觉是要看应用场景，但很多情况下 transition 更简单实用些。  </description>
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>https://www.liubeike.com/posts/html/</link>
      <pubDate>Thu, 08 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.liubeike.com/posts/html/</guid>
      <description>超文本标记语言（英语：HyperText Markup Language，简称：HTML）是一种用于创建网页的标准标记语言。
HTML 是谁发明的 蒂姆·伯纳斯-李（英语：Tim Berners-Lee），英国计算机科学家。他是万维网的发明者。1990 年 12 月 25 日，他成功利用互联网实现了超文本传输协议客户端与服务器的第一次通讯。
HTML 起手应该写什么 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;IE=edge&amp;#34; /&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&amp;#34; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的表章节的标签有哪些  标题 h1~h6 章节 section 段落 p 头部 header 脚部 footer 主要内容 main 旁支内容 aside 划分 div  全局属性有哪些  class 添加类名，可以加多个，以空格隔开。 contenteditable 用户可以直接在网页编辑元素 hidden 隐藏属性 id 尽量不用 style 设置样式 tabindex 控制 tab 键选中顺序 title 设置鼠标放上去提示文字  常用的内容标签有哪些  ol+li 有序列表 ul+li 无序列表 dl+dt+dd 表格+表头+表内容 pre 保留原始内容 hr 水平线 br 换行符 a 超链接 一般加 target=&amp;quot;_blank&amp;quot; em 强调语气 斜体 strong 强调内容 粗体 code 包裹的内容 字体等宽 quote 行内引用 blockquote 块内引用  重点标签 a 超链接  href 跳转到某个链接 href=#id 伪协议：javascript:;; mailto:邮箱 tel:手机号 target 指定使用哪个窗口打开，一般国内用_blank 使用新的标签打开  table 表格  table 表格根、thead 头部、tbody 身体、tfoot 尾部 tr 表行、td 表数据、th 表头 table 样式： table-layout:auto;//控制表格布局 border-collapse:collapse; //控制边框是否合并 border-spacing:0;//控制边框距离  img 发出一个 get 请求，展示一张图片  alt 加载失败后显示的内容 width、height 设置宽和高，只设置一个可以按比例自适应。 src 图片地址 加载成功可触发 onload 事件，失败可触发 onerror 事件。 响应式样式可设置 max-width:100%  典型的可替换元素有：   典型的可替换元素有 img、object、video 和 表单元素，如 textarea、input。</description>
    </item>
    
  </channel>
</rss>
